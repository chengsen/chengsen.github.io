(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{412:function(t,a,r){"use strict";r.r(a);var s=r(17),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),r("h2",{attrs:{id:"定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),r("h3",{attrs:{id:"什么是闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[t._v("#")]),t._v(" 什么是闭包")]),t._v(" "),r("ul",[r("li",[t._v("闭包就是能够读取其他函数内部变量的函数。")]),t._v(" "),r("li",[t._v('由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成"定义在一个函数内部的函数"。')]),t._v(" "),r("li",[t._v("所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。")])]),t._v(" "),r("h3",{attrs:{id:"闭包有什么用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包有什么用"}},[t._v("#")]),t._v(" 闭包有什么用")]),t._v(" "),r("ul",[r("li",[t._v("读取函数内部的变量")]),t._v(" "),r("li",[t._v("让这些变量的值始终保持在内存中。")])]),t._v(" "),r("h3",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),r("ul",[r("li",[t._v("由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。")]),t._v(" "),r("li",[t._v("闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);