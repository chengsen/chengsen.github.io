(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{416:function(t,a,_){"use strict";_.r(a);var s=_(17),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#http"}},[t._v("HTTP")]),_("ul",[_("li",[_("a",{attrs:{href:"#为什么-http1-不能实现多路复用"}},[t._v("为什么 http1 不能实现多路复用？")])])]),_("ul",[_("li",[_("a",{attrs:{href:"#http-2"}},[t._v("HTTP 2")]),_("ul",[_("li",[_("a",{attrs:{href:"#http2-了解么-能简单聊一下么"}},[t._v("http2 了解么，能简单聊一下么？")])]),_("li",[_("a",{attrs:{href:"#http2-首部压缩是什么原理"}},[t._v("http2 首部压缩是什么原理？")])])])]),_("li",[_("a",{attrs:{href:"#加密"}},[t._v("加密")]),_("ul",[_("li",[_("a",{attrs:{href:"#讲解一下-https-对称加密和非对称加密"}},[t._v("讲解一下 https 对称加密和非对称加密?")])]),_("li",[_("a",{attrs:{href:"#https-是如何保证数据传输安全的"}},[t._v("https 是如何保证数据传输安全的？")])]),_("li",[_("a",{attrs:{href:"#https-的请求可以拦截么-如何做"}},[t._v("https 的请求可以拦截么，如何做?")])])])]),_("li",[_("a",{attrs:{href:"#响应吗"}},[t._v("响应吗")]),_("ul",[_("li",[_("a",{attrs:{href:"#你所知道的-http-的响应码及含义"}},[t._v("你所知道的 http 的响应码及含义？")]),_("ul",[_("li",[_("a",{attrs:{href:"#_1xx-临时响应"}},[t._v("1xx(临时响应)")])]),_("li",[_("a",{attrs:{href:"#_2xx-成功"}},[t._v("2xx(成功)")])]),_("li",[_("a",{attrs:{href:"#_3xx-已重定向"}},[t._v("3xx(已重定向)")])]),_("li",[_("a",{attrs:{href:"#_4xx-请求错误"}},[t._v("4xx(请求错误)")])]),_("li",[_("a",{attrs:{href:"#_5xx-服务器错误"}},[t._v("5xx(服务器错误)")])]),_("li",[_("a",{attrs:{href:"#get、post-的区别"}},[t._v("get、post 的区别")])])])])])])])])])]),_("p"),t._v(" "),_("h3",{attrs:{id:"为什么-http1-不能实现多路复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么-http1-不能实现多路复用"}},[t._v("#")]),t._v(" 为什么 http1 不能实现多路复用？")]),t._v(" "),_("p",[t._v("http1 阶段是基于文本传输的，由于没有流的概念，在使用并行传输传递数据时，接收端在接收到响应后，并不能区分多个响应分别哪个请求，所以无法将多个响应的结果重新进行组装，也就实现不了多路复用。")]),t._v(" "),_("h2",{attrs:{id:"http-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP 2")]),t._v(" "),_("h3",{attrs:{id:"http2-了解么-能简单聊一下么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2-了解么-能简单聊一下么"}},[t._v("#")]),t._v(" http2 了解么，能简单聊一下么？")]),t._v(" "),_("ul",[_("li",[t._v("多路复用")]),t._v(" "),_("li",[t._v("首部压缩")]),t._v(" "),_("li",[t._v("服务器推送")])]),t._v(" "),_("h3",{attrs:{id:"http2-首部压缩是什么原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2-首部压缩是什么原理"}},[t._v("#")]),t._v(" http2 首部压缩是什么原理？")]),t._v(" "),_("p",[t._v("因为每个 HTTP 报文都要传输臃肿的首部字段导致的网络效率降低，解决思路，通信双方可以都维护一张 HTTP 首部字段索引列表，报文中只传输对应字段的索引值，就能大大压缩报文首部的长度，提高网络利用率。")]),t._v(" "),_("p",[t._v("HTTP/2 在客户端与服务器端都维护了一张首部字段索引列表， header 字段列表是以 key - value 键值对元素构成的有序集合，每个 header 字段元素都映射为一个索引值，报文中使用 header 字段的索引值进行二进制编码传输，显然比 HTTP/1.1 直接使用 header 字段 ASCII 编码传输，数据量小得多，这种减少 header 字段传输开销的技术可以称为首部压缩 HPACK。")]),t._v(" "),_("h2",{attrs:{id:"加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加密"}},[t._v("#")]),t._v(" 加密")]),t._v(" "),_("h3",{attrs:{id:"讲解一下-https-对称加密和非对称加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#讲解一下-https-对称加密和非对称加密"}},[t._v("#")]),t._v(" 讲解一下 https 对称加密和非对称加密?")]),t._v(" "),_("p",[t._v("非对称加密的加解密效率是非常低的，只作用在证书验证阶段")]),t._v(" "),_("h3",{attrs:{id:"https-是如何保证数据传输安全的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-是如何保证数据传输安全的"}},[t._v("#")]),t._v(" https 是如何保证数据传输安全的？")]),t._v(" "),_("p",[t._v("传输加密")]),t._v(" "),_("h3",{attrs:{id:"https-的请求可以拦截么-如何做"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-的请求可以拦截么-如何做"}},[t._v("#")]),t._v(" https 的请求可以拦截么，如何做?")]),t._v(" "),_("p",[t._v("完全是有可能的，不然 charles 怎么抓包，当然前提是客户端上装了相应的证书")]),t._v(" "),_("h2",{attrs:{id:"响应吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应吗"}},[t._v("#")]),t._v(" 响应吗")]),t._v(" "),_("h3",{attrs:{id:"你所知道的-http-的响应码及含义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#你所知道的-http-的响应码及含义"}},[t._v("#")]),t._v(" 你所知道的 http 的响应码及含义？")]),t._v(" "),_("h4",{attrs:{id:"_1xx-临时响应"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1xx-临时响应"}},[t._v("#")]),t._v(" 1xx(临时响应)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("100: 请求者应当继续提出请求。")])]),t._v(" "),_("li",[_("p",[t._v("101(切换协议) 请求者已要求服务器切换协议，服务器已确认并准备进行切换。")])])]),t._v(" "),_("h4",{attrs:{id:"_2xx-成功"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2xx-成功"}},[t._v("#")]),t._v(" 2xx(成功)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("200：正确的请求返回正确的结果")])]),t._v(" "),_("li",[_("p",[t._v("201：表示资源被正确的创建。比如说，我们 POST 用户名、密码正确创建了一个用户就可以返回 201。")])]),t._v(" "),_("li",[_("p",[t._v("202：请求是正确的，但是结果正在处理中，这时候客户端可以通过轮询等机制继续请求。")])])]),t._v(" "),_("h4",{attrs:{id:"_3xx-已重定向"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3xx-已重定向"}},[t._v("#")]),t._v(" 3xx(已重定向)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("300：请求成功，但结果有多种选择。")])]),t._v(" "),_("li",[_("p",[t._v("301：请求成功，但是资源被永久转移。")])]),t._v(" "),_("li",[_("p",[t._v("303：使用 GET 来访问新的地址来获取资源。")])]),t._v(" "),_("li",[_("p",[t._v("304：请求的资源并没有被修改过")])])]),t._v(" "),_("h4",{attrs:{id:"_4xx-请求错误"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4xx-请求错误"}},[t._v("#")]),t._v(" 4xx(请求错误)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("400：请求出现错误，比如请求头不对等。")])]),t._v(" "),_("li",[_("p",[t._v("401：没有提供认证信息。请求的时候没有带上 Token 等。")])]),t._v(" "),_("li",[_("p",[t._v("402：为以后需要所保留的状态码。")])]),t._v(" "),_("li",[_("p",[t._v("403：请求的资源不允许访问。就是说没有权限。")])]),t._v(" "),_("li",[_("p",[t._v("404：请求的内容不存在。")])])]),t._v(" "),_("h4",{attrs:{id:"_5xx-服务器错误"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5xx-服务器错误"}},[t._v("#")]),t._v(" 5xx(服务器错误)")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("500：服务器错误。")])]),t._v(" "),_("li",[_("p",[t._v("501：请求还没有被实现。")])])]),t._v(" "),_("h4",{attrs:{id:"get、post-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get、post-的区别"}},[t._v("#")]),t._v(" get、post 的区别")]),t._v(" "),_("p",[t._v("1.get 传参方式是通过地址栏 URL 传递，是可以直接看到 get 传递的参数；post 传参方式参数 URL 不可见，get 把请求的数据在 URL 后通过？连接，通过&进行参数分割。psot 将参数存放在 HTTP 的包体内")]),t._v(" "),_("p",[t._v("2.get 传递数据是通过 URL 进行传递，对传递的数据长度是受到 URL 大小的限制，URL 最大长度是 2048 个字符。post 没有长度限制")]),t._v(" "),_("p",[t._v("3.get 后退不会有影响，post 后退会重新进行提交")]),t._v(" "),_("p",[t._v("4.get 请求可以被缓存，post 不可以被缓存")]),t._v(" "),_("p",[t._v("5.get 请求只 URL 编码，post 支持多种编码方式")]),t._v(" "),_("p",[t._v("6.get 请求的记录会留在历史记录中，post 请求不会留在历史记录")]),t._v(" "),_("p",[t._v("7.get 只支持 ASCII 字符，post 没有字符类型限制")])])}),[],!1,null,null,null);a.default=r.exports}}]);